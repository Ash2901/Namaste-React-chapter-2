	1. What is NPM?
		a. NPM  != Node Package manager
		b. It is a package manager which consist of all the packages/libraries/utilities which can be used by developer.
		c. Ex: npm install react.
		
	2. What is 'Parcel/Webpack'? Why do we need it?
		a. Parcel is a zero config module bundler
		b. It bundles our code and convert it into optimize form so that it becomes fast in production.
		c. It bundles code in various aspect types, and it is easy to setup and start bundling code.
		d. EX: npm install parcel
		
	3. What is '.parcel-cache'?
		a. It is a directory generated by package bundler, serving as a cache to store intermediate build results.
		
	4. What is 'npx'?
		a. Stands for node package eXecute.
		b. It allows developer to execute any JavaScript package available on npm.
		c. It is npm package runner.
		d. Ex: npx parcel index.html
		
	5. What is difference between 'dependencies' vs 'dev-dependencies'?
		a. Dev dependencies:
			i. Required in Development phase.
			ii. devDependencies are those packages in the package. json file that you need only for project development purposes.
		b. Dependencies:
			i. Used in case of production build.
			ii. Dependency is an object that contains the library, which your project requires for production environments and functioning effectively. 
			
	6. What is Tree Shaking?
		a. It statically analyses the imports and exports of each module, and removes everything that isn't used.
		b. Ex : in case of CSS it removes unused classes.
		c. In React it removes unused functions/components.
		
	7. What is Hot Module Replacement?
		a. It allows all kinds of modules to be updated at runtime without the need for a full refresh.
		b. Live reload refreshes the entire webpage in the browser when anything changes. HMR, on the other hand, will only reload those code modules that have changed. 
		
	8. List down your 5 favorite 5 superpowers of Parcel and describe any 3 in your own words?
		a. Minification : Parcel includes minifiers for JavaScript, CSS, HTML, and SVG out of the box! Just run parcel build index.html, and your whole application will be built and optimized automatically.
		b. Compression : Compress app before we deploy using Gzip and Brotli
		c. Code Splitting :  Parcel supports zero configuration code splitting out of the box. This allows you to split your application code into separate bundles which can be loaded on demand, resulting in smaller initial bundle sizes and faster load times.
		d. Transpilation : Parcel transpiles your JavaScript and CSS for your target browsers automatically! Just declare a browserslist in your package.json, and Parcel takes care of transpiling only what's needed.
		e. Multi core : Parcel is designed around a multi-core architecture that parallelizes work across all of your cores and takes full advantage of modern hardware.
		
	9. What is '.gitignore'? What should we add and not add to it?
		a. .gitignore is a file which contains list of file which we don't want to push on github or use in production build i.e files/folders which are getting generated while using CLI is put into .gitignore.
		b. Ex: node-modules, dist .parcel-cache should be put into .gitignore.
		c. Ex: HTML, CSS , JavaScript files and React modules shouldn't be put into .gitignore.
		
	10. What is difference between package.json and package-lock.json?
		a. Package.json: Contains list of packages along with version which is present inside code with nearest version.
		b. Package-lock.json: It contains details about exact version of package which is installed in our code presently.
		
	11. What is node-modules? Is it good idea to push that into git?
		a. Contains list of all the dependencies which is needed to create our react application.
		b. Each modules have their own package.json file.
		c. Npm init
		
	12. What is the 'dist' folder?
		a. It contains compressed production ready files which will be pushed to production.
		b. Npx parcel build index.html
		
	13. What is 'browserlists' Read about different bundlers: vite, webpack, parcel.
		a. It is a configuration file which defines which browsers our App should supports.
		b. We can define browserlist inside package.json file.
		c. Syntax : 
		
		"browserslist": [
		    "last 3 versions"
		  ]
		
	14. Read about ^ -caret and ~ - tilda
		a. Both are used inside package.json file.
		b. ^ - will do minor upgrades in dependencies, If there is any.
		c. Ex: current react version "^18.0.0" -- can be upgraded to "18.0.1"
		d. ~ - will do major upgrades in dependencies, If it is there. 
		e. Ex: current react version "^18.0.0" -- can be upgraded to "19.0.0"
        
	15. Read about Script types in html (MDN docs)
	
	
